#cloud-config
# Database Server Configuration for DocAssembler

# Update system and install packages
packages:
  - wget
  - curl
  - git
  - vim
  - htop
  - unzip
  - postgresql
  - postgresql-server
  - postgresql-contrib
  - redis
  - fail2ban
  - firewalld

# Users
users:
  - name: docassembler
    groups: wheel
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash

# Enable services
runcmd:
  # Update system
  - dnf update -y
  
  # Configure firewall
  - systemctl enable firewalld
  - systemctl start firewalld
  - firewall-cmd --permanent --add-service=postgresql
  - firewall-cmd --permanent --add-service=redis
  - firewall-cmd --permanent --add-port=22/tcp
  - firewall-cmd --reload
  
  # Initialize PostgreSQL
  - postgresql-setup --initdb
  - systemctl enable postgresql
  - systemctl start postgresql
  
  # Configure PostgreSQL
  - |
    sudo -u postgres psql -c "CREATE DATABASE docassembler;"
    sudo -u postgres psql -c "CREATE USER docassembler_user WITH PASSWORD 'Temp1234!';"
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE docassembler TO docassembler_user;"
    sudo -u postgres psql -c "ALTER USER docassembler_user CREATEDB;"
  
  # Configure PostgreSQL for network access
  - |
    echo "host    all             all             10.0.0.0/16            md5" >> /var/lib/pgsql/data/pg_hba.conf
    echo "listen_addresses = '*'" >> /var/lib/pgsql/data/postgresql.conf
  
  # Start and enable Redis
  - systemctl enable redis
  - systemctl start redis
  
  # Configure Redis for network access
  - sed -i 's/bind 127.0.0.1/bind 0.0.0.0/' /etc/redis.conf
  - systemctl restart redis
  
  # Restart PostgreSQL with new configuration
  - systemctl restart postgresql
  
  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Set up log rotation
  - |
    cat > /etc/logrotate.d/docassembler-db << EOF
    /var/log/docassembler-db/*.log {
        daily
        missingok
        rotate 52
        compress
        delaycompress
        copytruncate
        notifempty
        create 644 postgres postgres
    }
    EOF
  
  # Create backup script
  - mkdir -p /opt/docassembler/scripts
  - |
    cat > /opt/docassembler/scripts/backup.sh << 'EOF'
    #!/bin/bash
    # Database backup script
    
    BACKUP_DIR="/opt/docassembler/backups"
    DATE=$(date +%Y%m%d_%H%M%S)
    
    mkdir -p $BACKUP_DIR
    
    # PostgreSQL backup
    sudo -u postgres pg_dump docassembler > $BACKUP_DIR/docassembler_$DATE.sql
    
    # Redis backup
    cp /var/lib/redis/dump.rdb $BACKUP_DIR/redis_$DATE.rdb
    
    # Compress backups
    gzip $BACKUP_DIR/docassembler_$DATE.sql
    gzip $BACKUP_DIR/redis_$DATE.rdb
    
    # Clean old backups (keep 30 days)
    find $BACKUP_DIR -name "*.gz" -mtime +30 -delete
    
    echo "Backup completed: $DATE"
    EOF
  
  - chmod +x /opt/docassembler/scripts/backup.sh
  
  # Set up cron for backups
  - echo "0 2 * * * /opt/docassembler/scripts/backup.sh >> /var/log/docassembler-backup.log 2>&1" | crontab -
  
  # Create health check script
  - |
    cat > /opt/docassembler/scripts/health-check.sh << 'EOF'
    #!/bin/bash
    # Database health check script
    
    # Check PostgreSQL
    if ! sudo -u postgres psql -c '\l' > /dev/null 2>&1; then
        echo "PostgreSQL is not running"
        systemctl restart postgresql
    fi
    
    # Check Redis
    if ! redis-cli ping > /dev/null 2>&1; then
        echo "Redis is not running"
        systemctl restart redis
    fi
    
    echo "Database health check completed"
    EOF
  
  - chmod +x /opt/docassembler/scripts/health-check.sh
  
  # Set up health check cron
  - echo "*/5 * * * * /opt/docassembler/scripts/health-check.sh >> /var/log/docassembler-health.log 2>&1" | crontab -
  
  # Create log directory
  - mkdir -p /var/log/docassembler-db
  - chown postgres:postgres /var/log/docassembler-db

# Final message
final_message: "DocAssembler Database Server setup completed successfully!"

